[common]
# param ranges:
# pedestal: -1.5 to 0 (logspace)
# contrast: -1.5 to 0 (logspace)
# temporal frequency: 0 to 20
# spatial frequency: 0.5 to 7
# size: 1 to 10
# eccentricity: 0 to 10
parnames = [pedestal, contrast, temporal_frequency, spatial_frequency, size, eccentricity]
lb = [-1.5, -1.5, 0, 0.5, 1, 0]
ub = [0, 0, 20, 7, 10, 10]
outcome_type = single_probit
strategy_names = [init_strat, opt_strat] # The strategies that will be used, corresponding to the named sections below
acqf = GlobalMI

[GPClassificationModel]
inducing_size = 200
mean_covar_factory=default_mean_covar_factory
max_fit_time=1.0

# Configuration for the initialization strategy, which we use to gather initial points
# before we start doing model-based acquisition
[init_strat]
n_trials = 10 # number of sobol trials to run
# The generator class used to generate new parameter values
generator = SobolGenerator

# Configuration for the optimization strategy, our model-based acquisition
[opt_strat]
# number of model-based trials to run
n_trials = 90
# On every trial, AEPsych can either initialize model hyperparameters randomly and refit
# from scratch, or initialize them to the previous model's parameters. This governs
# how often the former happens vs the latter. Using the previous model's parameters is often faster
# (leading to less waiting between trials) but occasional refitting is useful for avoiding local minima
# in hyperparameters, especially early in the experiment.
model = GPClassificationModel
refit_every = 20
# The generator class used to generate new parameter values
generator = OptimizeAcqfGenerator

## Below this section are configurations of all the classes defined in the section above,
## matching the API in the code.
[OptimizeAcqfGenerator]
# number of restarts for acquisition function optimization.
restarts = 2
# number of samples for quasi-random initialization of the acquisition function optimizer
samps = 100
max_gen_time=0.5

[GlobalMI]
target = 0.75
