### Example config for ordinal (likert) data
# Assuming you are learning a latent value from k-point scores,  the
# only things that need to be changed for a
# typical experiment are:
# 1. parnames, lb and ub under [common], and optionally target.
# 2. min_asks under init_strat
# 3. n_levels under OrdinalLikelihood

## The common section includes global server parameters and parameters
[common]
use_ax = True # Required to enable the new parameter features.
parnames = [par1, par2, par3] # names of the parameters
lb = [2, -1, 1] # lower bounds of the parameters, in the same order as above
ub = [3, 1, 20] # upper bounds of parameter, in the same order as above

# Linear constrains placed on the continuous parameters
# Parameters with log_scale = True cannot be included here.
# Having lots of constraints may make trial generation slow.
par_constraints = [par1 >= par2] 
                            
# Names of discrete parameters; the possible values of each are specified below.
choice_parnames = [par4] 

fixed_parnames = [par5] 


stimuli_per_trial = 1 # the number of stimuli shown in each trial; 1 for single, or 2 for pairwise experiments
outcome_types = [ordinal]
strategy_names = [init_strat, opt_strat] # The strategies that will be used, corresponding to the named sections below

# Configuration for the initialization strategy, which we use to gather initial points
# before we start doing model-based acquisition
[init_strat]
min_total_tells = 2 # number of sobol trials to run
generator = SobolGenerator # The generator class used to generate new parameter values

[opt_strat]
generator = OptimizeAcqfGenerator # after sobol, do model-based active-learning
min_total_tells = 3 # Finish the experiment after 3 total data points have been collected. Depending on how noisy
                    # your problem is, you may need several dozen points per parameter to get an accurate model.
acqf = qNoisyExpectedImprovement # The acquisition function to be used with the model. We recommend
model = OrdinalGP

# Configuration for the model
[ContinuousRegressionGP]
max_fit_time = 0.1 # Maximum fitting time in seconds. This is set to a small value here for testing, but setting a
                   # higher value can produce better model fits. If not specified, model will spend as much time as
                   # it needs to get the best fit it can.

## OrdinalGP model settings.
[OrdinalGP]
# Number of inducing points for approximate inference. 100 is fine for 2d and overkill for 1d;
# for larger dimensions, scale this up.
inducing_size = 100
# ordinal_mean_covar_factory has better defaults for the ordinal setting than the default factory,
mean_covar_factory = ordinal_mean_covar_factory
likelihood = OrdinalLikelihood

[OrdinalLikelihood]
n_levels = 5

[par4]
choices = [low, med, high] # Possible values for the discrete parameter, par4.
is_ordered = True # Indicates that the choices for par5 are ordered such that low < med < high.

[par5]
value = 123 # Value of the fixed parameter, par5. Can be a float or string.

[par3]
log_scale = True # Indicates that par1 is on a log scale.
value_type = int