### Example config for ordinal (likert) data
# Assuming you are learning a latent value from k-point scores,  the
# only things that need to be changed for a
# typical experiment are:
# 1. parnames, lb and ub under [common], and optionally target.
# 2. min_asks under init_strat
# 3. n_levels under OrdinalLikelihood

## The common section includes global server parameters and parameters
[common]
use_ax = True # Required to enable the new parameter features.
parnames = [par1, par2, par3] # Names of continuous parameters.
lb = [0, 0, 1] # Lower bounds of the continuous parameters, in the same order as above.
ub = [3, 3, 4] # Upper bounds of the continuous parameter, in the same order as above.
par_constraints = [par1 >= par2] # Linear constrains placed on the continuous parameters
                                                     # Parameters with log_scale = True cannot be included here.
                                                     # Having lots of constraints may make trial generation slow.

choice_parnames = [par4, par5] # Names of discrete parameters; the possible values of each are specified below.

fixed_parnames = [par6, par7] # Names of fixed parameters, the values of which are specified below. These parameters
                              # always have the same value and are not modeled.

stimuli_per_trial = 1 # the number of stimuli shown in each trial; 1 for single, or 2 for pairwise experiments
outcome_types = [ordinal]
strategy_names = [init_strat, opt_strat] # The strategies that will be used, corresponding to the named sections below

# Configuration for the initialization strategy, which we use to gather initial points
# before we start doing model-based acquisition
[init_strat]
min_total_tells = 2 # number of sobol trials to run
generator = SobolGenerator # The generator class used to generate new parameter values

[opt_strat]
generator = OptimizeAcqfGenerator # after sobol, do model-based active-learning
min_total_tells = 3 # Finish the experiment after 3 total data points have been collected. Depending on how noisy
                    # your problem is, you may need several dozen points per parameter to get an accurate model.
acqf = qNoisyExpectedImprovement # The acquisition function to be used with the model. We recommend
model = OrdinalGP

## OrdinalGP model settings.
[OrdinalGP]
# Number of inducing points for approximate inference. 100 is fine for 2d and overkill for 1d;
# for larger dimensions, scale this up.
inducing_size = 100
# ordinal_mean_covar_factory has better defaults for the ordinal setting than the default factory,
mean_covar_factory = ordinal_mean_covar_factory
likelihood = OrdinalLikelihood

[OrdinalLikelihood]
n_levels = 5


[par3]
log_scale = True # Indicates that par4 should be searched in log space. This is useful when percentage increases are
                 # more important than absolute increases, i.e., the difference from 1 to 2 is greater than 10 to 11.
value_type = int # Specifies that par1 can only take integer values.

[par4]
choices = [a, b] # Possible values for the discrete parameter, par4. By default, no ordering is assumed.

[par5]
choices = [low, med, high] # Possible values for the discrete parameter, par5.
is_ordered = True # Indicates that the choices for par5 are ordered such that low < med < high.

[par6]
value = 123 # Value of the fixed parameter, par6. Can be a float or string.

[par7]
value = placeholder # Value of the fixed parameter, par7. Can be a float or string.
